(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	__webpack_require__(1);
	__webpack_require__(2);
	var core_1 = __webpack_require__(3);
	var angular2_universal_1 = __webpack_require__(4);
	var app_module_1 = __webpack_require__(5);
	core_1.enableProdMode();
	var platform = angular2_universal_1.platformNodeDynamic();
	function default_1(params) {
	    return new Promise(function (resolve, reject) {
	        var requestZone = Zone.current.fork({
	            name: 'angular-universal request',
	            properties: {
	                baseUrl: '/',
	                requestUrl: params.url,
	                originUrl: params.origin,
	                preboot: false,
	                // TODO: Render just the <app> component instead of wrapping it inside an extra HTML document
	                // Waiting on https://github.com/angular/universal/issues/347
	                document: '<!DOCTYPE html><html><head></head><body><app></app></body></html>'
	            },
	            onHandleError: function (parentZone, currentZone, targetZone, error) {
	                // If any error occurs while rendering the module, reject the whole operation
	                reject(error);
	                return true;
	            }
	        });
	        return requestZone.run(function () { return platform.serializeModule(app_module_1.AppModule); }).then(function (html) {
	            resolve({ html: html });
	        }, reject);
	    });
	}
	exports.default = default_1;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = require("angular2-universal-polyfills");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = require("zone.js");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = require("@angular/core");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = require("angular2-universal");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var router_1 = __webpack_require__(6);
	var forms_1 = __webpack_require__(7);
	var angular2_universal_1 = __webpack_require__(4);
	var app_component_1 = __webpack_require__(8);
	var navmenu_component_1 = __webpack_require__(13);
	var home_component_1 = __webpack_require__(17);
	var privacy_checking_component_1 = __webpack_require__(19);
	var policy_review_component_1 = __webpack_require__(24);
	var access_control_form_create_component_1 = __webpack_require__(28);
	var access_control_detail_component_1 = __webpack_require__(30);
	var privacy_policy_form_create_component_1 = __webpack_require__(32);
	var privacy_policy_detail_component_1 = __webpack_require__(34);
	var privacy_domain_form_create_component_1 = __webpack_require__(36);
	var policy_management_1 = __webpack_require__(39);
	var sub_privacy_policy_form_create_component_1 = __webpack_require__(41);
	var primeng_1 = __webpack_require__(21);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    return AppModule;
	}());
	AppModule = __decorate([
	    core_1.NgModule({
	        bootstrap: [app_component_1.AppComponent],
	        declarations: [
	            app_component_1.AppComponent,
	            navmenu_component_1.NavMenuComponent,
	            home_component_1.HomeComponent,
	            privacy_checking_component_1.PrivacyComponent,
	            policy_review_component_1.PolicyReviewComponent,
	            access_control_form_create_component_1.AccessControlPolicyFormCreateComponent,
	            privacy_policy_form_create_component_1.PrivacyPolicyFormCreateComponent,
	            privacy_domain_form_create_component_1.PrivacyDomainComponent,
	            policy_management_1.PolicyManagementComponent,
	            sub_privacy_policy_form_create_component_1.SubPrivacyPolicyFormCreateComponent,
	            privacy_policy_detail_component_1.PrivacyPolicyDetailComponent,
	            access_control_detail_component_1.AccessControlDetailComponent
	        ],
	        imports: [
	            angular2_universal_1.UniversalModule,
	            router_1.RouterModule.forRoot([
	                { path: '', redirectTo: 'home', pathMatch: 'full' },
	                { path: 'home', component: home_component_1.HomeComponent },
	                { path: 'privacy_checking', component: privacy_checking_component_1.PrivacyComponent },
	                { path: 'policy_review', component: policy_review_component_1.PolicyReviewComponent },
	                { path: 'access_control_policy', component: access_control_form_create_component_1.AccessControlPolicyFormCreateComponent },
	                { path: 'access_control_detail/:id', component: access_control_detail_component_1.AccessControlDetailComponent },
	                { path: 'privacy_policy', component: privacy_policy_form_create_component_1.PrivacyPolicyFormCreateComponent },
	                { path: 'privacy_policy_detail/:id', component: privacy_policy_detail_component_1.PrivacyPolicyDetailComponent },
	                { path: 'sub_privacy_policy', component: sub_privacy_policy_form_create_component_1.SubPrivacyPolicyFormCreateComponent },
	                { path: 'privacy_domain', component: privacy_domain_form_create_component_1.PrivacyDomainComponent },
	                { path: 'policy_management', component: policy_management_1.PolicyManagementComponent },
	                { path: '**', redirectTo: 'home' },
	            ]),
	            forms_1.FormsModule,
	            primeng_1.ButtonModule,
	            primeng_1.GrowlModule,
	            primeng_1.DropdownModule,
	            primeng_1.AutoCompleteModule, primeng_1.InputTextareaModule, primeng_1.MessagesModule, primeng_1.AccordionModule,
	            primeng_1.InputTextModule, primeng_1.DataTableModule, primeng_1.SharedModule, primeng_1.PanelModule, primeng_1.FieldsetModule
	        ]
	    })
	], AppModule);
	exports.AppModule = AppModule;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = require("@angular/router");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = require("@angular/forms");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var AppComponent = (function () {
	    function AppComponent() {
	    }
	    return AppComponent;
	}());
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'app',
	        template: __webpack_require__(9),
	        styles: [__webpack_require__(10)]
	    })
	], AppComponent);
	exports.AppComponent = AppComponent;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = "<div class='container-fluid'>\n    <div class='row'>\n        <div class='col-sm-3'>\n            <nav-menu></nav-menu>\n        </div>\n        <div class='col-sm-9 body-content'>\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	
	        var result = __webpack_require__(11);
	
	        if (typeof result === "string") {
	            module.exports = result;
	        } else {
	            module.exports = result.toString();
	        }
	    

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(12)();
	// imports
	
	
	// module
	exports.push([module.id, "@media (max-width: 767px) {\n    /* On small screens, the nav menu spans the full width of the screen. Leave a space for it. */\n    .body-content {\n        padding-top: 50px;\n    }\n}\n", ""]);
	
	// exports


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var NavMenuComponent = (function () {
	    function NavMenuComponent() {
	    }
	    return NavMenuComponent;
	}());
	NavMenuComponent = __decorate([
	    core_1.Component({
	        selector: 'nav-menu',
	        template: __webpack_require__(14),
	        styles: [__webpack_require__(15)]
	    })
	], NavMenuComponent);
	exports.NavMenuComponent = NavMenuComponent;


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	module.exports = "<div class='main-nav'>\r\n    <div class='navbar navbar-inverse'>\r\n        <div class='navbar-header'>\r\n            <button type='button' class='navbar-toggle' data-toggle='collapse' data-target='.navbar-collapse'>\r\n                <span class='sr-only'>Toggle navigation</span>\r\n                <span class='icon-bar'></span>\r\n                <span class='icon-bar'></span>\r\n                <span class='icon-bar'></span>\r\n            </button>\r\n            <a class='navbar-brand' [routerLink]=\"['/home']\">Privacy Access Control</a>\r\n        </div>\r\n        <div class='clearfix'></div>\r\n        <div class='navbar-collapse collapse'>\r\n            <ul class='nav navbar-nav'>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/privacy_checking']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Privacy Checking\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/access_control_policy']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Access Control Policy\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/privacy_policy']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Privacy Policy\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/sub_privacy_policy']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Sub Privacy Policy\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/policy_review']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Policy Review\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/privacy_domain']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Privacy Domain\r\n                    </a>\r\n                </li>\r\n                <li [routerLinkActive]=\"['link-active']\">\r\n                    <a [routerLink]=\"['/policy_management']\">\r\n                        <span class='glyphicon glyphicon-th-list'></span> Policy Management\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	
	        var result = __webpack_require__(16);
	
	        if (typeof result === "string") {
	            module.exports = result;
	        } else {
	            module.exports = result.toString();
	        }
	    

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(12)();
	// imports
	
	
	// module
	exports.push([module.id, "li .glyphicon {\n    margin-right: 10px;\n}\n\n/* Highlighting rules for nav menu items */\nli.link-active a,\nli.link-active a:hover,\nli.link-active a:focus {\n    background-color: #4189C7;\n    color: white;\n}\n\n/* Keep the nav menu independent of scrolling and on top of other items */\n.main-nav {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    z-index: 1;\n}\n\n@media (min-width: 768px) {\n    /* On small screens, convert the nav menu to a vertical sidebar */\n    .main-nav {\n        height: 100%;\n        width: calc(25% - 20px);\n    }\n    .navbar {\n        border-radius: 0px;\n        border-width: 0px;\n        height: 100%;\n    }\n    .navbar-header {\n        float: none;\n    }\n    .navbar-collapse {\n        border-top: 1px solid #444;\n        padding: 0px;\n    }\n    .navbar ul {\n        float: none;\n    }\n    .navbar li {\n        float: none;\n        font-size: 15px;\n        margin: 6px;\n    }\n    .navbar li a {\n        padding: 10px 16px;\n        border-radius: 4px;\n    }\n    .navbar a {\n        /* If a menu item's text is too long, truncate it */\n        width: 100%;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n}\n", ""]);
	
	// exports


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var HomeComponent = (function () {
	    function HomeComponent() {
	    }
	    return HomeComponent;
	}());
	HomeComponent = __decorate([
	    core_1.Component({
	        selector: 'home',
	        template: __webpack_require__(18)
	    })
	], HomeComponent);
	exports.HomeComponent = HomeComponent;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = "<h1>Hello, world!</h1>\n<p>Welcome to your new single-page application, built with:</p>\n<ul>\n    <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\n    <li><a href='https://angular.io/'>Angular 2</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\n    <li><a href='https://webpack.github.io/'>Webpack</a> for building and bundling client-side resources</li>\n    <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\n</ul>\n<p>To help you get started, we've also set up:</p>\n<ul>\n    <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\n    <li><strong>Server-side prerendering</strong>. For faster initial loading and improved SEO, your Angular 2 app is prerendered on the server. The resulting HTML is then transferred to the browser where a client-side copy of the app takes over.</li>\n    <li><strong>Webpack dev middleware</strong>. In development mode, there's no need to run the <code>webpack</code> build tool. Your client-side resources are dynamically built on demand. Updates are available as soon as you modify any file.</li>\n    <li><strong>Hot module replacement</strong>. In development mode, you don't even need to reload the page after making most changes. Within seconds of saving changes to files, your Angular 2 app will be rebuilt and a new instance injected is into the page.</li>\n    <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and the <code>webpack</code> build tool produces minified static CSS and JavaScript files.</li>\n</ul>\n"

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var primeng_1 = __webpack_require__(21);
	var app_setting_1 = __webpack_require__(22);
	var PrivacyComponent = (function () {
	    function PrivacyComponent(http) {
	        this.http = http;
	        this.user_property_names = [];
	        //#endregion
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        this.environment_result = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        //#region result
	        this.result = [];
	        this.result_property_names = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	        this.resource_operators.push({ label: 'Equals', value: 'Equals' });
	        this.resource_operators.push({ label: 'GreaterThan', value: 'GreaterThan' });
	        this.resource_operators.push({ label: 'LessThan', value: 'LessThan' });
	    }
	    PrivacyComponent.prototype.ngOnInit = function () {
	        var that = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'accounts/').subscribe(function (data) {
	            var jsonObject = data.json()[0];
	            console.log(jsonObject);
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                var object = jsonObject[property];
	                if (!Array.isArray(object) && typeof object !== 'object') {
	                    that.user_property_names.push(property);
	                }
	            }
	            that.users = data.json();
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	    };
	    PrivacyComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (that.resource_selected_field === undefined)
	                    that.resource_selected_field = property;
	                that.initialize_fields(property, jsonObject, "", that.resource_fields);
	            }
	        });
	    };
	    PrivacyComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    PrivacyComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    PrivacyComponent.prototype.and_click = function () {
	        this.condition_result += " AND ";
	    };
	    PrivacyComponent.prototype.or_click = function () {
	        this.condition_result += " OR ";
	    };
	    PrivacyComponent.prototype.not_click = function () {
	        this.condition_result += "NOT( ";
	    };
	    PrivacyComponent.prototype.open_bracket_click = function () {
	        this.condition_result += "(";
	    };
	    PrivacyComponent.prototype.close_bracket_click = function () {
	        this.condition_result += " )";
	    };
	    PrivacyComponent.prototype.add_condition = function () {
	        if (!this.resource_selected_field)
	            this.resource_selected_field = this.resource_fields[0].value;
	        if (!this.resource_selected_operator)
	            this.resource_selected_operator = this.resource_operators[0].value;
	        var expression = this.resource_selected_operator + '('
	            + this.resource_selected_field + ', ' + this.resource_values + ')';
	        if (this.condition_result)
	            this.condition_result += expression;
	        else
	            this.condition_result = expression;
	    };
	    PrivacyComponent.prototype.clear_condition = function () {
	        this.condition_result = null;
	    };
	    PrivacyComponent.prototype.add_environment_field = function () {
	        if (!this.environment_result)
	            this.environment_result = "\"" + this.environment_field + "\" : \"" + this.environment_value + "\"";
	        else
	            this.environment_result += ", \"" + this.environment_field + "\" : \"" + this.environment_value + "\"";
	        this.environment_object = "{ " + this.environment_result + " }";
	        this.environment_field = this.environment_value = null;
	    };
	    PrivacyComponent.prototype.clear_environment = function () {
	        this.environment_object = "";
	        this.environment_result = "";
	    };
	    PrivacyComponent.prototype.submit = function () {
	        var _this = this;
	        if (!this.selected_user) {
	            this.msgs = [];
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'You have not selected user' });
	            return;
	        }
	        var environment = "{ " + this.environment_result + " }";
	        console.log(typeof this.selected_user._id === 'object');
	        var command = {
	            "UserID": typeof this.selected_user._id === 'object' ? this.selected_user._id.$oid : this.selected_user._id,
	            "ResourceName": this.collection_selected_name,
	            "ResourceCondition": this.condition_result,
	            "Environment": environment,
	            "Action": "read"
	        };
	        console.log(command);
	        this.result = [];
	        this.result_property_names = [];
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'privacy/check/', JSON.stringify(command), this.options).subscribe(function (data) {
	            if (data.text() == 'Deny') {
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Denied' });
	            }
	            else if (data.text() == 'Not Applicable') {
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Not Applicable' });
	            }
	            else {
	                that.result = data.json();
	                if (that.result.length == 0) {
	                    _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'User doesnot have right to access resource' });
	                }
	                var jsonObject = data.json()[0];
	                for (var property in jsonObject) {
	                    that.result_property_names.push(property);
	                }
	            }
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return PrivacyComponent;
	}());
	PrivacyComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_checking',
	        template: __webpack_require__(23),
	        providers: [primeng_1.ConfirmationService]
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PrivacyComponent);
	exports.PrivacyComponent = PrivacyComponent;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = require("@angular/http");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	module.exports = require("primeng/primeng");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var AppSetting = (function () {
	    function AppSetting() {
	    }
	    return AppSetting;
	}());
	AppSetting.API_ENDPOINT = 'http://localhost:5000/api/';
	exports.AppSetting = AppSetting;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"col-lg-12\">\r\n    <p-growl [value]=\"msgs\"></p-growl>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12\"><h3 style=\"color: blue\">Subject Selection</h3></div>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <p-dataTable [value]=\"users\" selectionMode=\"single\" [(selection)]=\"selected_user\"\r\n                     [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,20,50]\" [rows]=\"10\">\r\n            <p-column *ngFor=\"let col of user_property_names\" field=\"{{col}}\" header=\"{{col}}\"\r\n                      [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <!--<p-footer><div style=\"text-align: left\">Selected User: {{json_helper.stringify(selected_user)}}</div></p-footer>-->\r\n        </p-dataTable>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\"><h3 style=\"color:#f0ad4e\">Resource Condition</h3></div>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-xs-12 form-group\">\r\n            <label>Collection Name :</label>\r\n            <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\" \r\n                        [style]=\"{'width':'120px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-xs-4 form-group\">\r\n            <label style=\"padding-right:13px\">Resource Field: </label>\r\n            <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'120px'}\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-xs-4 form-group\">\r\n            <label>Operator :</label>\r\n            <p-dropdown [options]=\"resource_operators\" [(ngModel)]=\"resource_selected_operator\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-xs-4 form-group\">\r\n            <label>Value :</label>\r\n            <input id=\"in\" type=\"text\" size=\"25\" pInputText [(ngModel)]=\"resource_values\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\" style=\"padding-bottom: 10px\">\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add\" (click)=\"add_condition()\"></button>\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Clear\" (click)=\"clear_condition()\"></button>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <textarea style=\"border-color: black\" rows=\"2\" cols=\"140\" pInputTextarea\r\n                  [(ngModel)]=\"condition_result\" [disabled]=\"true\"></textarea>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n        <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\"><h3 style=\"color:#5cb85c\">Environment Condition</h3></div>\r\n\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-4 form-group\">\r\n            <label>Field :</label>\r\n            <p-autoComplete [(ngModel)]=\"environment_field\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                            [minLength]=\"1\" >\r\n            </p-autoComplete>\r\n            <!--<input id=\"in\" type=\"text\" size=\"25\" pInputText [(ngModel)]=\"environment_field\" />-->\r\n        </div>\r\n        <div class=\"col-xs-4 form-group\">\r\n            <label>Value :</label>\r\n            <input id=\"in\" type=\"text\" size=\"25\" pInputText [(ngModel)]=\"environment_value\" />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"col-xs-12\" style=\"padding-bottom: 10px\" >\r\n        <button class=\"ui-button-success\" pButton type=\"button\" \r\n                label=\"Add\" (click)=\"add_environment_field()\"></button>\r\n        <button class=\"ui-button-success\" pButton type=\"button\"\r\n                 label=\"Clear\" (click)=\"clear_environment()\"></button>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\">\r\n        <textarea style=\"border-color: black\" rows=\"2\" cols=\"140\" pInputTextarea class=\"ui-inputtextarea\"\r\n                  [(ngModel)]=\"environment_object\" [disabled]=\"true\"></textarea>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-primary btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Submit</button>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12\" *ngIf=\"result.length > 0\" style=\"margin-top:20px\">\r\n        <table class=\"table table-bordered table-responsive table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th *ngFor=\"let col of result_property_names\">{{col}}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of result\">\r\n                    <td *ngFor=\"let idx of result_property_names\">{{json_helper.stringify(row[idx])}}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>"

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var access_control_rule_model_1 = __webpack_require__(25);
	var privacy_rule_model_1 = __webpack_require__(26);
	var PolicyReviewComponent = (function () {
	    function PolicyReviewComponent(http) {
	        this.http = http;
	        this.collection_names = [];
	        //#region resource
	        this.resource_fields = [];
	        //#endregion
	        this.actions = [];
	        this.policy_types = [];
	        //#region subject
	        this.subject_fields = [];
	        //#endregion
	        //#region result
	        this.result = [];
	        this.result_property_names = [];
	        //#endregion
	        this.access_controls = [];
	        this.privacy_policies = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    PolicyReviewComponent.prototype.ngOnInit = function () {
	        var that = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        this.policy_types.push({ label: 'Access Control', value: 'Access Control' });
	        this.policy_types.push({ label: 'Privacy', value: 'Privacy' });
	        this.selected_policy_type = this.policy_types[0].value;
	    };
	    PolicyReviewComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            console.log(jsonObject);
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.resource_selected_field === undefined)
	                    that.resource_selected_field = property;
	                that.initialize_fields(property, jsonObject, "", that.resource_fields);
	            }
	        });
	    };
	    PolicyReviewComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    PolicyReviewComponent.prototype.add_subject_field = function () {
	        if (!this.subject_result_temp)
	            this.subject_result_temp = "\"" + this.selected_subject_field + "\" : \"" + this.constant_subject_value + "\"";
	        else
	            this.subject_result_temp += ", \"" + this.selected_subject_field + "\" : \"" + this.constant_subject_value + "\"";
	        this.subject_result = "{ " + this.subject_result_temp + " }";
	        this.constant_subject_value = null;
	    };
	    PolicyReviewComponent.prototype.add_resource_field = function () {
	        if (!this.resource_result_temp)
	            this.resource_result_temp = "\"" + this.resource_selected_field + "\" : \"" + this.constant_resource_value + "\"";
	        else
	            this.resource_result_temp += ", \"" + this.resource_selected_field + "\" : \"" + this.constant_resource_value + "\"";
	        this.resource_result = "{ " + this.resource_result_temp + " }";
	        this.constant_resource_value = null;
	    };
	    PolicyReviewComponent.prototype.add_environment_value = function () {
	        if (!this.environment_result_temp)
	            this.environment_result_temp = "\"" + this.environment_field + "\" : \"" + this.constant_environment_value + "\"";
	        else
	            this.environment_result_temp += ", \"" + this.environment_field + "\" : \"" + this.constant_environment_value + "\"";
	        this.environment_result = "{ " + this.environment_result_temp + " }";
	        this.environment_field = this.constant_environment_value = null;
	    };
	    PolicyReviewComponent.prototype.clear = function () {
	        this.environment_result_temp = null;
	        this.resource_result_temp = null;
	        this.subject_result_temp = null;
	        this.resource_result = "";
	        this.subject_result = "";
	        this.environment_result = "";
	    };
	    PolicyReviewComponent.prototype.submit = function () {
	        var _this = this;
	        var command = {
	            UserJsonData: this.subject_result,
	            ResourceJsonData: this.resource_result,
	            EnvironmentJsonData: this.environment_result,
	            Action: this.selected_action,
	            CollectionName: this.collection_selected_name
	        };
	        this.result = [];
	        this.result_property_names = [];
	        var that = this;
	        if (this.selected_policy_type == 'Access Control') {
	            this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'AccessControl/Review/', JSON.stringify(command), this.options).subscribe(function (data) {
	                _this.access_controls = [];
	                _this.privacy_policies = [];
	                var policies = data.json();
	                for (var _i = 0, policies_1 = policies; _i < policies_1.length; _i++) {
	                    var policy = policies_1[_i];
	                    _this.access_controls.push(new access_control_rule_model_1.AccessControl(policy.policyId, policy.description, policy.collectionName, policy.ruleCombining));
	                }
	            }, function (error) {
	                _this.msgs = [];
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	            });
	        }
	        else {
	            this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'Privacy/Review/', JSON.stringify(command), this.options).subscribe(function (data) {
	                _this.access_controls = [];
	                _this.privacy_policies = [];
	                var policies = data.json();
	                for (var _i = 0, policies_2 = policies; _i < policies_2.length; _i++) {
	                    var policy = policies_2[_i];
	                    _this.privacy_policies.push(new privacy_rule_model_1.PrivacyPolicy(policy.policyId, policy.description, policy.collectionName));
	                }
	            }, function (error) {
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	            });
	        }
	    };
	    return PolicyReviewComponent;
	}());
	PolicyReviewComponent = __decorate([
	    core_1.Component({
	        selector: 'policy_review',
	        template: __webpack_require__(27)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PolicyReviewComponent);
	exports.PolicyReviewComponent = PolicyReviewComponent;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var AccessControlRule = (function () {
	    function AccessControlRule(ruleId, condition, effect) {
	        this.RuleId = ruleId;
	        this.Condition = condition;
	        this.Effect = effect;
	    }
	    return AccessControlRule;
	}());
	exports.AccessControlRule = AccessControlRule;
	var AccessControl = (function () {
	    function AccessControl(policyID, description, collectionName, ruleCombining, action) {
	        if (action === void 0) { action = "read"; }
	        this.PolicyID = policyID;
	        this.CollectionName = collectionName;
	        this.Description = description;
	        this.RuleCombining = ruleCombining;
	        this.Action = action;
	    }
	    return AccessControl;
	}());
	exports.AccessControl = AccessControl;


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FieldEffect = (function () {
	    function FieldEffect(propertyName, privacyFunction) {
	        this.FunctionApply = privacyFunction;
	        this.Name = propertyName;
	    }
	    return FieldEffect;
	}());
	exports.FieldEffect = FieldEffect;
	var FieldEffectOption = (function () {
	    function FieldEffectOption(propertyName, privacyFunction) {
	        this.Functions = privacyFunction;
	        this.Name = propertyName;
	    }
	    return FieldEffectOption;
	}());
	exports.FieldEffectOption = FieldEffectOption;
	var PrivacyRule = (function () {
	    function PrivacyRule(ruleID, condition, fieldEffects) {
	        this.RuleID = ruleID;
	        this.Condition = condition;
	        this.FieldEffects = fieldEffects;
	    }
	    return PrivacyRule;
	}());
	exports.PrivacyRule = PrivacyRule;
	var PrivacyPolicy = (function () {
	    function PrivacyPolicy(policyID, description, collectionName) {
	        this.PolicyID = policyID;
	        this.Description = description;
	        this.CollectionName = collectionName;
	    }
	    return PrivacyPolicy;
	}());
	exports.PrivacyPolicy = PrivacyPolicy;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Policy Review</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Collection Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'150px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Action :</label>\r\n                <p-dropdown [options]=\"actions\" [(ngModel)]=\"selected_action\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Policy Type :</label>\r\n                <p-dropdown [options]=\"policy_types\" [(ngModel)]=\"selected_policy_type\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"padding-right:28px\">Subject Field: </label>\r\n                <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"padding-right:13px\">Value: </label>\r\n                <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"constant_subject_value\" />\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-1 form-group\" style=\"padding-top:25px\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add\" (click)=\"add_subject_field()\"></button>\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-5 form-group\">\r\n                <label style=\"padding-right:13px\">Result: </label>\r\n                <textarea style=\"border-color: black\" rows=\"1\" cols=\"60\" pInputTextarea\r\n                          [(ngModel)]=\"subject_result\" [disabled]=\"true\"></textarea>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"padding-right:13px\">Resource Field: </label>\r\n                <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"padding-right:13px\">Value: </label>\r\n                <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"constant_resource_value\" />\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-1 form-group\" style=\"padding-top:25px\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add\" (click)=\"add_resource_field()\"></button>\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-5 form-group\">\r\n                <label style=\"padding-right:13px\">Result: </label>\r\n                <textarea style=\"border-color: black\" rows=\"1\" cols=\"60\" pInputTextarea\r\n                          [(ngModel)]=\"resource_result\" [disabled]=\"true\"></textarea>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"\">Environment Field: </label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"environment_field\" />\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-3 form-group\">\r\n                <label style=\"padding-right:13px\">Value: </label>\r\n                <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"constant_environment_value\" />\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-1 form-group\" style=\"padding-top:25px\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add\" (click)=\"add_environment_value()\"></button>\r\n            </div>\r\n            <div class=\"col-xs-4 col-lg-5 form-group\">\r\n                <label style=\"padding-right:13px\">Result: </label>\r\n                <textarea style=\"border-color: black\" rows=\"1\" cols=\"60\" pInputTextarea\r\n                          [(ngModel)]=\"environment_result\" [disabled]=\"true\"></textarea>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12 text-center\">\r\n        <div class=\"col-lg-offset-1 col-lg-5\">\r\n            <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Submit</button>\r\n        </div>\r\n        <div class=\"col-lg-offset-0 col-lg-5\">\r\n            <button class=\"btn btn-danger btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"clear()\">Clear</button>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\" *ngIf=\"access_controls.length > 0\" style=\"padding-top:15px\">\r\n        <p-dataTable [value]=\"access_controls\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,20,50]\" [rows]=\"10\">\r\n            <p-column field=\"PolicyID\" header=\"Policy ID\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Description\" header=\"Description\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"CollectionName\" header=\"Collection Name\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"RuleCombining\" header=\"Rule Combining\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Action\" header=\"Action\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" pButton (click)=\"select_access_control(car)\" icon=\"fa-share\"></button>\r\n                </template>\r\n            </p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" class=\"ui-button-danger\" pButton (click)=\"delete_privacy_policy(car)\" icon=\"fa-trash\"></button>\r\n                </template>\r\n            </p-column>\r\n        </p-dataTable>\r\n    </div>\r\n    <div class=\"col-lg-12\" *ngIf=\"privacy_policies.length > 0\" style=\"padding-top:15px\">\r\n        <p-dataTable [value]=\"privacy_policies\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,20,50]\" [rows]=\"10\">\r\n            <p-column field=\"PolicyID\" header=\"Policy ID\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Description\" header=\"Description\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"CollectionName\" header=\"Collection Name\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" pButton (click)=\"select_access_control(car)\" icon=\"fa-share\"></button>\r\n                </template>\r\n            </p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" class=\"ui-button-danger\" pButton (click)=\"delete_privacy_policy(car)\" icon=\"fa-trash\"></button>\r\n                </template>\r\n            </p-column>\r\n        </p-dataTable>\r\n    </div>\r\n</div>"

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var access_control_rule_model_1 = __webpack_require__(25);
	var AccessControlPolicyFormCreateComponent = (function () {
	    function AccessControlPolicyFormCreateComponent(http) {
	        this.http = http;
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        //#endregion
	        this.policy_id = '';
	        this.description = '';
	        this.actions = [];
	        this.rule_effects = [];
	        this.final_rule_effects = [];
	        this.function_names = [];
	        this.subject_fields = [];
	        this.current_rule_result = "";
	        this.final_rule_result = [];
	        this.rules_combining = [];
	        this.target_result = "";
	        this.environment_value = '';
	        this.constant_value = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        this.rule_id = '';
	        this.rule_ids = [];
	        this.msgs = [];
	        this.rules = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    AccessControlPolicyFormCreateComponent.prototype.ngOnInit = function () {
	        var that = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'function/').subscribe(function (data) {
	            var names = data.json();
	            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
	                var name = names_1[_i];
	                that.function_names.push({ label: name, value: name });
	            }
	            that.selected_function_name = names[0];
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        this.rule_effects.push({ label: 'Permit', value: 'Permit' });
	        this.rule_effects.push({ label: 'Deny', value: 'Deny' });
	        this.selected_rule_effect = this.rule_effects[0].value;
	        this.rules_combining.push({ label: 'Permit overrides', value: 'Permit overrides' });
	        this.rules_combining.push({ label: 'Deny overrides', value: 'Deny overrides' });
	        this.selected_rule_combining = this.rules_combining[0].value;
	    };
	    AccessControlPolicyFormCreateComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_fields(property, jsonObject, "", that.resource_fields);
	            }
	        });
	        this.reset();
	    };
	    AccessControlPolicyFormCreateComponent.prototype.reset = function () {
	        this.rule_ids = [];
	        this.target_result = '';
	        this.current_rule_result = '';
	        this.rules = [];
	    };
	    AccessControlPolicyFormCreateComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    //#region data form.
	    AccessControlPolicyFormCreateComponent.prototype.add_function_name_to_rule = function () {
	        this.current_rule_result += this.selected_function_name + " ( ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_function_name_to_target = function () {
	        this.target_result += this.selected_function_name + " ( ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_resource_field_to_rule = function () {
	        this.current_rule_result += "Resource." + this.resource_selected_field + " ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_resource_field_to_target = function () {
	        this.target_result += "Resource." + this.resource_selected_field + " ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_subject_field_to_rule = function () {
	        this.current_rule_result += "Subject." + this.selected_subject_field + " ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_subject_field_to_target = function () {
	        this.target_result += "Subject." + this.selected_subject_field + " ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_constant_value_to_rule = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.current_rule_result += "'" + this.constant_value + "' ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_constant_value_to_target = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.target_result += "'" + this.constant_value + "' ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_environment_value_to_rule = function () {
	        this.current_rule_result += "Environment." + this.environment_value + " ";
	    };
	    AccessControlPolicyFormCreateComponent.prototype.add_environment_value_to_target = function () {
	        this.target_result += "Environment." + this.environment_value + " ";
	    };
	    //#endregion
	    //#region logic form
	    AccessControlPolicyFormCreateComponent.prototype.and_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "AND ";
	        }
	        else {
	            this.current_rule_result += "AND ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.or_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "OR ";
	        }
	        else {
	            this.current_rule_result += "OR ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.not_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "NOT ( ";
	        }
	        else {
	            this.current_rule_result += "NOT ( ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.open_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "( ";
	        }
	        else {
	            this.current_rule_result += "( ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.close_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ") ";
	        }
	        else {
	            this.current_rule_result += ") ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.comma_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ", ";
	        }
	        else {
	            this.current_rule_result += ", ";
	        }
	    };
	    AccessControlPolicyFormCreateComponent.prototype.clear_condition = function (isTarget) {
	        if (isTarget) {
	            this.target_result = "";
	        }
	        else {
	            this.current_rule_result = "";
	        }
	    };
	    //#endregion 
	    AccessControlPolicyFormCreateComponent.prototype.add_current_rule = function () {
	        if (this.current_rule_result == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        else if (this.rule_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID can not be null' });
	            return;
	        }
	        for (var _i = 0, _a = this.rule_ids; _i < _a.length; _i++) {
	            var r = _a[_i];
	            if (r == this.rule_id) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID must be unique' });
	                return;
	            }
	        }
	        this.final_rule_result.push(this.current_rule_result);
	        this.rule_ids.push(this.rule_id);
	        this.final_rule_effects.push(this.selected_rule_effect);
	        this.rules.push(new access_control_rule_model_1.AccessControlRule(this.rule_id, this.current_rule_result, this.selected_rule_effect));
	        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'One rule added' });
	    };
	    AccessControlPolicyFormCreateComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    AccessControlPolicyFormCreateComponent.prototype.submit = function () {
	        var _this = this;
	        if (this.policy_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Policy ID can not be null' });
	            return;
	        }
	        else if (this.rules.length == 0) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        var command = {
	            "PolicyID": this.policy_id,
	            "CollectionName": this.collection_selected_name,
	            "Description": this.description,
	            "Action": this.selected_action,
	            "RuleCombining": this.selected_rule_combining,
	            "Target": this.target_result,
	            "Rules": this.rules
	        };
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'AccessControlPolicy', JSON.stringify(command), this.options).subscribe(function (data) {
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'Create Successfully' });
	            that.reset();
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return AccessControlPolicyFormCreateComponent;
	}());
	AccessControlPolicyFormCreateComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_rule',
	        template: __webpack_require__(29)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], AccessControlPolicyFormCreateComponent);
	exports.AccessControlPolicyFormCreateComponent = AccessControlPolicyFormCreateComponent;


/***/ }),
/* 29 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Access Control Policy Form</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Policy Identifier :</label>\r\n                <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"policy_id\" />\r\n            </div>\r\n            <div class=\"col-xs-8 form-group\">\r\n                <label style=\"padding-right:5px\">Description :</label>\r\n                <input type=\"text\" size=\"70\" pInputText [(ngModel)]=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Collection Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'150px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Action :</label>\r\n                <p-dropdown [options]=\"actions\" [(ngModel)]=\"selected_action\"></p-dropdown>\r\n            </div>\r\n\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:3px\">Rule Combining :</label>\r\n                <p-dropdown [options]=\"rules_combining\" [(ngModel)]=\"selected_rule_combining\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <!-- Target -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Target Condition:</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\",\" (click)=\"comma_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_condition(true)\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"target_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <!-- Rule -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Current Rule :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\",\" (click)=\"comma_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_condition()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"current_rule_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\" style=\"padding-top: 5px\">\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label style=\"padding-right:5px\">Rule ID :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"rule_id\" />\r\n            </div>\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label>Rule Effect :</label>\r\n                <p-dropdown [options]=\"rule_effects\" [(ngModel)]=\"selected_rule_effect\"></p-dropdown>\r\n            </div>\r\n            \r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add Current Rule\" (click)=\"add_current_rule()\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\" *ngIf=\"rules.length > 0\">\r\n            <p-dataTable [value]=\"rules\" [editable]=\"true\">\r\n                <p-column field=\"RuleId\" header=\"Rule ID\" [editable]=\"true\"></p-column>\r\n                <p-column field=\"Condition\" header=\"Condition\" [editable]=\"true\" [style]=\"{'width':'320px'}\"></p-column>\r\n                <p-column field=\"Effect\" header=\"Effect\" [editable]=\"true\" [style]=\"{'overflow':'visible'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"editor\">\r\n                        <p-dropdown [(ngModel)]=\"car[col.field]\" [options]=\"rule_effects\" [autoWidth]=\"false\" [style]=\"{'width':'100%'}\" required=\"true\"></p-dropdown>\r\n                    </template>\r\n                </p-column>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <p-fieldset legend=\"Utility\" [toggleable]=\"true\">\r\n\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Function Name: </label>\r\n                    <p-dropdown [options]=\"function_names\" [(ngModel)]=\"selected_function_name\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_function_name_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_function_name_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Resource Field: </label>\r\n                    <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_resource_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_resource_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:28px\">Subject Field: </label>\r\n                    <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_subject_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_subject_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Constant Value: </label>\r\n                    <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"constant_value\" />\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_constant_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_constant_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"\">Environment Field: </label>\r\n                    <p-autoComplete [(ngModel)]=\"environment_value\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                                    [minLength]=\"1\" [size]=\"17\">\r\n                    </p-autoComplete>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_environment_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_environment_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n        </p-fieldset>\r\n    </div>\r\n    \r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Create</button>\r\n    </div>\r\n</div>"

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var access_control_rule_model_1 = __webpack_require__(25);
	var AccessControlDetailComponent = (function () {
	    function AccessControlDetailComponent(http) {
	        this.http = http;
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        //#endregion
	        this.policy_id = '';
	        this.description = '';
	        this.actions = [];
	        this.rule_effects = [];
	        this.final_rule_effects = [];
	        this.function_names = [];
	        this.subject_fields = [];
	        this.current_rule_result = "";
	        this.final_rule_result = [];
	        this.rules_combining = [];
	        this.target_result = "";
	        this.environment_value = '';
	        this.constant_value = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        this.rule_id = '';
	        this.rule_ids = [];
	        this.msgs = [];
	        this.rules = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    AccessControlDetailComponent.prototype.ngOnInit = function () {
	        var that = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'function/').subscribe(function (data) {
	            var names = data.json();
	            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
	                var name = names_1[_i];
	                that.function_names.push({ label: name, value: name });
	            }
	            that.selected_function_name = names[0];
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        this.rule_effects.push({ label: 'Permit', value: 'Permit' });
	        this.rule_effects.push({ label: 'Deny', value: 'Deny' });
	        this.selected_rule_effect = this.rule_effects[0].value;
	        this.rules_combining.push({ label: 'Permit overrides', value: 'Permit overrides' });
	        this.rules_combining.push({ label: 'Deny overrides', value: 'Deny overrides' });
	        this.selected_rule_combining = this.rules_combining[0].value;
	    };
	    AccessControlDetailComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_fields(property, jsonObject, "", that.resource_fields);
	            }
	        });
	        this.reset();
	    };
	    AccessControlDetailComponent.prototype.reset = function () {
	        this.rule_ids = [];
	        this.target_result = '';
	        this.current_rule_result = '';
	        this.rules = [];
	    };
	    AccessControlDetailComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    //#region data form.
	    AccessControlDetailComponent.prototype.add_function_name_to_rule = function () {
	        this.current_rule_result += this.selected_function_name + " ( ";
	    };
	    AccessControlDetailComponent.prototype.add_function_name_to_target = function () {
	        this.target_result += this.selected_function_name + " ( ";
	    };
	    AccessControlDetailComponent.prototype.add_resource_field_to_rule = function () {
	        this.current_rule_result += "Resource." + this.resource_selected_field + " ";
	    };
	    AccessControlDetailComponent.prototype.add_resource_field_to_target = function () {
	        this.target_result += "Resource." + this.resource_selected_field + " ";
	    };
	    AccessControlDetailComponent.prototype.add_subject_field_to_rule = function () {
	        this.current_rule_result += "Subject." + this.selected_subject_field + " ";
	    };
	    AccessControlDetailComponent.prototype.add_subject_field_to_target = function () {
	        this.target_result += "Subject." + this.selected_subject_field + " ";
	    };
	    AccessControlDetailComponent.prototype.add_constant_value_to_rule = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.current_rule_result += "'" + this.constant_value + "' ";
	    };
	    AccessControlDetailComponent.prototype.add_constant_value_to_target = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.target_result += "'" + this.constant_value + "' ";
	    };
	    AccessControlDetailComponent.prototype.add_environment_value_to_rule = function () {
	        this.current_rule_result += "Environment." + this.environment_value + " ";
	    };
	    AccessControlDetailComponent.prototype.add_environment_value_to_target = function () {
	        this.target_result += "Environment." + this.environment_value + " ";
	    };
	    //#endregion
	    //#region logic form
	    AccessControlDetailComponent.prototype.and_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "AND ";
	        }
	        else {
	            this.current_rule_result += "AND ";
	        }
	    };
	    AccessControlDetailComponent.prototype.or_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "OR ";
	        }
	        else {
	            this.current_rule_result += "OR ";
	        }
	    };
	    AccessControlDetailComponent.prototype.not_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "NOT ( ";
	        }
	        else {
	            this.current_rule_result += "NOT ( ";
	        }
	    };
	    AccessControlDetailComponent.prototype.open_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "( ";
	        }
	        else {
	            this.current_rule_result += "( ";
	        }
	    };
	    AccessControlDetailComponent.prototype.close_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ") ";
	        }
	        else {
	            this.current_rule_result += ") ";
	        }
	    };
	    AccessControlDetailComponent.prototype.comma_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ", ";
	        }
	        else {
	            this.current_rule_result += ", ";
	        }
	    };
	    AccessControlDetailComponent.prototype.clear_condition = function (isTarget) {
	        if (isTarget) {
	            this.target_result = "";
	        }
	        else {
	            this.current_rule_result = "";
	        }
	    };
	    //#endregion 
	    AccessControlDetailComponent.prototype.add_current_rule = function () {
	        if (this.current_rule_result == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        else if (this.rule_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID can not be null' });
	            return;
	        }
	        for (var _i = 0, _a = this.rule_ids; _i < _a.length; _i++) {
	            var r = _a[_i];
	            if (r == this.rule_id) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID must be unique' });
	                return;
	            }
	        }
	        this.final_rule_result.push(this.current_rule_result);
	        this.rule_ids.push(this.rule_id);
	        this.final_rule_effects.push(this.selected_rule_effect);
	        this.rules.push(new access_control_rule_model_1.AccessControlRule(this.rule_id, this.current_rule_result, this.selected_rule_effect));
	        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'One rule added' });
	    };
	    AccessControlDetailComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    AccessControlDetailComponent.prototype.submit = function () {
	        var _this = this;
	        if (this.policy_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Policy ID can not be null' });
	            return;
	        }
	        else if (this.rules.length == 0) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        var command = {
	            "PolicyID": this.policy_id,
	            "CollectionName": this.collection_selected_name,
	            "Description": this.description,
	            "Action": this.selected_action,
	            "RuleCombining": this.selected_rule_combining,
	            "Target": this.target_result,
	            "Rules": this.rules
	        };
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'AccessControlPolicy', JSON.stringify(command), this.options).subscribe(function (data) {
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'Create Successfully' });
	            that.reset();
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return AccessControlDetailComponent;
	}());
	AccessControlDetailComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_rule',
	        template: __webpack_require__(31)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], AccessControlDetailComponent);
	exports.AccessControlDetailComponent = AccessControlDetailComponent;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Access Control Policy Detail</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Policy Identifier :</label>\r\n                <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"policy_id\" />\r\n            </div>\r\n            <div class=\"col-xs-8 form-group\">\r\n                <label style=\"padding-right:5px\">Description :</label>\r\n                <input type=\"text\" size=\"70\" pInputText [(ngModel)]=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Collection Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'150px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Action :</label>\r\n                <p-dropdown [options]=\"actions\" [(ngModel)]=\"selected_action\"></p-dropdown>\r\n            </div>\r\n\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:3px\">Rule Combining :</label>\r\n                <p-dropdown [options]=\"rules_combining\" [(ngModel)]=\"selected_rule_combining\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <!-- Target -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Target Condition:</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\",\" (click)=\"comma_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_condition(true)\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"target_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <!-- Rule -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Current Rule :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\",\" (click)=\"comma_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_condition()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"current_rule_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\" style=\"padding-top: 5px\">\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label style=\"padding-right:5px\">Rule ID :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"rule_id\" />\r\n            </div>\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label>Rule Effect :</label>\r\n                <p-dropdown [options]=\"rule_effects\" [(ngModel)]=\"selected_rule_effect\"></p-dropdown>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add Current Rule\" (click)=\"add_current_rule()\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\" *ngIf=\"rules.length > 0\">\r\n            <p-dataTable [value]=\"rules\" [editable]=\"true\">\r\n                <p-column field=\"RuleId\" header=\"Rule ID\" [editable]=\"true\"></p-column>\r\n                <p-column field=\"Condition\" header=\"Condition\" [editable]=\"true\" [style]=\"{'width':'320px'}\"></p-column>\r\n                <p-column field=\"Effect\" header=\"Effect\" [editable]=\"true\" [style]=\"{'overflow':'visible'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"editor\">\r\n                        <p-dropdown [(ngModel)]=\"car[col.field]\" [options]=\"rule_effects\" [autoWidth]=\"false\" [style]=\"{'width':'100%'}\" required=\"true\"></p-dropdown>\r\n                    </template>\r\n                </p-column>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <p-fieldset legend=\"Utility\" [toggleable]=\"true\">\r\n\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Function Name: </label>\r\n                    <p-dropdown [options]=\"function_names\" [(ngModel)]=\"selected_function_name\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_function_name_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_function_name_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Resource Field: </label>\r\n                    <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_resource_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_resource_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:28px\">Subject Field: </label>\r\n                    <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_subject_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_subject_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Constant Value: </label>\r\n                    <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"constant_value\" />\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_constant_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_constant_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"\">Environment Field: </label>\r\n                    <p-autoComplete [(ngModel)]=\"environment_value\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                                    [minLength]=\"1\" [size]=\"17\">\r\n                    </p-autoComplete>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_environment_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_environment_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n        </p-fieldset>\r\n    </div>\r\n\r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Update</button>\r\n    </div>\r\n</div>"

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var privacy_rule_model_1 = __webpack_require__(26);
	var PrivacyPolicyFormCreateComponent = (function () {
	    function PrivacyPolicyFormCreateComponent(http) {
	        this.http = http;
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        //#endregion
	        this.policy_id = '';
	        this.description = '';
	        this.actions = [];
	        this.function_names = [];
	        this.subject_fields = [];
	        this.current_rule_result = "";
	        this.final_rule_result = [];
	        this.target_result = "";
	        this.constant_value = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        //#endregion environment
	        this.rule_id = '';
	        this.rule_ids = [];
	        this.privacy_functions = [];
	        this.field_effects = [];
	        this.final_field_effects = [];
	        this.field_effect_options = [];
	        this.privacy_rules = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    PrivacyPolicyFormCreateComponent.prototype.ngOnInit = function () {
	        var that = this;
	        //#region call web api for option data
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'function/').subscribe(function (data) {
	            var names = data.json();
	            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
	                var name = names_1[_i];
	                that.function_names.push({ label: name, value: name });
	            }
	            that.selected_function_name = names[0];
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunctions/').subscribe(function (data) {
	            var methods = data.json();
	            for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	                var method = methods_1[_i];
	                that.privacy_functions.push({ label: method, value: method });
	            }
	            that.privacy_functions.push({ label: 'Optional', value: 'Optional' });
	        });
	        //#endregion
	        //#region hard code for options
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        //#endregion
	    };
	    PrivacyPolicyFormCreateComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.field_effect_options = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_field_effects(property, jsonObject, "", that.resource_fields);
	                that.field_effects = [];
	                for (var _i = 0, _a = that.resource_fields; _i < _a.length; _i++) {
	                    var item = _a[_i];
	                    that.field_effects.push(new privacy_rule_model_1.FieldEffect(item.label, "Optional"));
	                }
	            }
	        });
	        this.reset();
	    };
	    PrivacyPolicyFormCreateComponent.prototype.initialize_field_effects = function (property, jsonObject, prefix, container) {
	        var _this = this;
	        if (property == "_id")
	            return;
	        var that = this;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_field_effects(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_field_effects(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            var name_1 = "";
	            if (prefix == '') {
	                container.push({ label: property, value: property });
	                name_1 = property;
	            }
	            else {
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	                name_1 = prefix + '.' + property;
	            }
	            var parameter = this.collection_selected_name + '.' + name_1;
	            this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunction?name=' + parameter, this.options).subscribe(function (data) {
	                var effects = data.json();
	                var select_items = [];
	                for (var _i = 0, effects_1 = effects; _i < effects_1.length; _i++) {
	                    var effect = effects_1[_i];
	                    select_items.push({ label: effect, value: effect });
	                }
	                that.field_effect_options.push(new privacy_rule_model_1.FieldEffectOption(name_1, select_items));
	            }, function (error) {
	                _this.msgs = [];
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	            });
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    //#region data form.
	    PrivacyPolicyFormCreateComponent.prototype.add_function_name_to_rule = function () {
	        this.current_rule_result += this.selected_function_name + " ( ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_function_name_to_target = function () {
	        this.target_result += this.selected_function_name + " ( ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_resource_field_to_rule = function () {
	        this.current_rule_result += "Resource." + this.resource_selected_field + " ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_resource_field_to_target = function () {
	        this.target_result += "Resource." + this.resource_selected_field + " ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_subject_field_to_rule = function () {
	        this.current_rule_result += "Subject." + this.selected_subject_field + " ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_subject_field_to_target = function () {
	        this.target_result += "Subject." + this.selected_subject_field + " ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_constant_value_to_rule = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.current_rule_result += "'" + this.constant_value + "' ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_constant_value_to_target = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.target_result += "'" + this.constant_value + "' ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_environment_value_to_rule = function () {
	        this.current_rule_result += "Environment." + this.environment_value + " ";
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_environment_value_to_target = function () {
	        this.target_result += "Environment." + this.environment_value + " ";
	    };
	    //#endregion
	    //#region logic form
	    PrivacyPolicyFormCreateComponent.prototype.and_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "AND ";
	        }
	        else {
	            this.current_rule_result += "AND ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.or_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "OR ";
	        }
	        else {
	            this.current_rule_result += "OR ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.not_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "NOT ( ";
	        }
	        else {
	            this.current_rule_result += "NOT ( ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.open_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "( ";
	        }
	        else {
	            this.current_rule_result += "( ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.close_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ") ";
	        }
	        else {
	            this.current_rule_result += ") ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.comma_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ", ";
	        }
	        else {
	            this.current_rule_result += ", ";
	        }
	    };
	    PrivacyPolicyFormCreateComponent.prototype.clear_rule = function (isTarget) {
	        if (isTarget) {
	            this.target_result = "";
	        }
	        else {
	            this.current_rule_result = "";
	        }
	    };
	    //#endregion
	    PrivacyPolicyFormCreateComponent.prototype.reset = function () {
	        this.rule_ids = [];
	        this.target_result = '';
	        this.current_rule_result = '';
	        this.privacy_rules = [];
	    };
	    PrivacyPolicyFormCreateComponent.prototype.add_current_rule = function () {
	        if (this.rule_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule Id can not be null' });
	            return;
	        }
	        if (this.current_rule_result == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        for (var _i = 0, _a = this.rule_ids; _i < _a.length; _i++) {
	            var r = _a[_i];
	            if (r == this.rule_id) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID must be unique' });
	                return;
	            }
	        }
	        this.final_rule_result.push(this.current_rule_result);
	        this.rule_ids.push(this.rule_id);
	        var cloned = [];
	        for (var _b = 0, _c = this.field_effects; _b < _c.length; _b++) {
	            var item = _c[_b];
	            cloned.push(new privacy_rule_model_1.FieldEffect(item.Name, item.FunctionApply));
	        }
	        this.final_field_effects.push(cloned);
	        this.privacy_rules.push(new privacy_rule_model_1.PrivacyRule(this.rule_id, this.current_rule_result, cloned));
	        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'One Rule added' });
	    };
	    PrivacyPolicyFormCreateComponent.prototype.getPrivacyFunctions = function (fieldName) {
	        var result;
	        if (this.field_effect_options.length == 0)
	            return this.privacy_functions;
	        else
	            result = this.field_effect_options.find(function (x) { return x.Name == fieldName; });
	        if (result != undefined)
	            return result.Functions;
	        return this.privacy_functions;
	    };
	    PrivacyPolicyFormCreateComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    PrivacyPolicyFormCreateComponent.prototype.submit = function () {
	        var _this = this;
	        console.log(this.final_field_effects);
	        if (this.policy_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Policy Id can not be null' });
	            return;
	        }
	        if (this.privacy_rules.length == 0) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rules can not be null' });
	            return;
	        }
	        var command = {
	            "PolicyID": this.policy_id,
	            "CollectionName": this.collection_selected_name,
	            "Description": this.description,
	            "Target": this.target_result,
	            "Rules": this.privacy_rules
	        };
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyPolicy', JSON.stringify(command), this.options).subscribe(function (data) {
	            that.reset();
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: "Privacy Policy added successfully" });
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return PrivacyPolicyFormCreateComponent;
	}());
	PrivacyPolicyFormCreateComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_policy',
	        template: __webpack_require__(33)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PrivacyPolicyFormCreateComponent);
	exports.PrivacyPolicyFormCreateComponent = PrivacyPolicyFormCreateComponent;


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Privacy Policy Form</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Policy Identifier :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"policy_id\" />\r\n            </div>\r\n            <div class=\"col-xs-8 form-group\">\r\n                <label style=\"padding-right:5px\">Description :</label>\r\n                <input type=\"text\" size=\"70\" pInputText [(ngModel)]=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Collection Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'150px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <!-- Target -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Target :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\",\" (click)=\"comma_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule(true)\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"target_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <!-- Rule -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Current Rule :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\",\" (click)=\"comma_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"current_rule_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <p-dataTable [value]=\"field_effects\" [editable]=\"true\">\r\n                <p-column field=\"Name\" header=\"Property Name\" [editable]=\"false\"></p-column>\r\n                <p-column field=\"FunctionApply\" header=\"Privacy Function\"\r\n                          [editable]=\"true\" [style]=\"{'overflow':'visible'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"editor\">\r\n                        <p-dropdown [(ngModel)]=\"car[col.field]\" [options]=\"getPrivacyFunctions(car.Name)\"\r\n                                    [autoWidth]=\"false\" [style]=\"{'width':'100%'}\" required=\"true\"></p-dropdown>\r\n                    </template>\r\n                </p-column>\r\n            </p-dataTable>\r\n        </div>\r\n        <div class=\"col-xs-12\" style=\"padding-top: 5px\">\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label style=\"padding-right:5px\">Rule Id :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"rule_id\" />\r\n            </div>\r\n            <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add Current Rule\" (click)=\"add_current_rule()\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\" *ngIf=\"privacy_rules.length > 0\">\r\n            <p-dataTable [value]=\"privacy_rules\" [editable]=\"true\">\r\n                <p-column field=\"RuleID\" header=\"Rule ID\" [editable]=\"true\"></p-column>\r\n                <p-column field=\"Condition\" header=\"Condition\" [editable]=\"true\" [style]=\"{'width':'400px'}\"></p-column>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <p-fieldset legend=\"Utility\" [toggleable]=\"true\">\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Function Name: </label>\r\n                    <p-dropdown [options]=\"function_names\" [(ngModel)]=\"selected_function_name\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_function_name_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_function_name_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Resource Field: </label>\r\n                    <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_resource_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_resource_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:28px\">Subject Field: </label>\r\n                    <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_subject_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_subject_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Constant Value: </label>\r\n                    <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"constant_value\" />\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_constant_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_constant_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"\">Environment Field: </label>\r\n                    <p-autoComplete [(ngModel)]=\"environment_value\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                                    [minLength]=\"1\" [size]=\"17\">\r\n                    </p-autoComplete>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_environment_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_environment_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n\r\n        </p-fieldset>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Create</button>\r\n    </div>\r\n</div>"

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var privacy_rule_model_1 = __webpack_require__(26);
	var PrivacyPolicyDetailComponent = (function () {
	    function PrivacyPolicyDetailComponent(http) {
	        this.http = http;
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        //#endregion
	        this.policy_id = '';
	        this.description = '';
	        this.actions = [];
	        this.function_names = [];
	        this.subject_fields = [];
	        this.current_rule_result = "";
	        this.final_rule_result = [];
	        this.target_result = "";
	        this.constant_value = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        //#endregion environment
	        this.rule_id = '';
	        this.rule_ids = [];
	        this.privacy_functions = [];
	        this.field_effects = [];
	        this.final_field_effects = [];
	        this.field_effect_options = [];
	        this.privacy_rules = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    PrivacyPolicyDetailComponent.prototype.ngOnInit = function () {
	        var that = this;
	        //#region call web api for option data
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'function/').subscribe(function (data) {
	            var names = data.json();
	            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
	                var name = names_1[_i];
	                that.function_names.push({ label: name, value: name });
	            }
	            that.selected_function_name = names[0];
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunctions/').subscribe(function (data) {
	            var methods = data.json();
	            for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	                var method = methods_1[_i];
	                that.privacy_functions.push({ label: method, value: method });
	            }
	            that.privacy_functions.push({ label: 'Optional', value: 'Optional' });
	        });
	        //#endregion
	        //#region hard code for options
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        //#endregion
	    };
	    PrivacyPolicyDetailComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.field_effect_options = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_field_effects(property, jsonObject, "", that.resource_fields);
	                that.field_effects = [];
	                for (var _i = 0, _a = that.resource_fields; _i < _a.length; _i++) {
	                    var item = _a[_i];
	                    that.field_effects.push(new privacy_rule_model_1.FieldEffect(item.label, "Optional"));
	                }
	            }
	        });
	        this.reset();
	    };
	    PrivacyPolicyDetailComponent.prototype.initialize_field_effects = function (property, jsonObject, prefix, container) {
	        var _this = this;
	        if (property == "_id")
	            return;
	        var that = this;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_field_effects(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_field_effects(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            var name_1 = "";
	            if (prefix == '') {
	                container.push({ label: property, value: property });
	                name_1 = property;
	            }
	            else {
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	                name_1 = prefix + '.' + property;
	            }
	            var parameter = this.collection_selected_name + '.' + name_1;
	            this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunction?name=' + parameter, this.options).subscribe(function (data) {
	                var effects = data.json();
	                var select_items = [];
	                for (var _i = 0, effects_1 = effects; _i < effects_1.length; _i++) {
	                    var effect = effects_1[_i];
	                    select_items.push({ label: effect, value: effect });
	                }
	                that.field_effect_options.push(new privacy_rule_model_1.FieldEffectOption(name_1, select_items));
	            }, function (error) {
	                _this.msgs = [];
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	            });
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    //#region data form.
	    PrivacyPolicyDetailComponent.prototype.add_function_name_to_rule = function () {
	        this.current_rule_result += this.selected_function_name + " ( ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_function_name_to_target = function () {
	        this.target_result += this.selected_function_name + " ( ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_resource_field_to_rule = function () {
	        this.current_rule_result += "Resource." + this.resource_selected_field + " ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_resource_field_to_target = function () {
	        this.target_result += "Resource." + this.resource_selected_field + " ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_subject_field_to_rule = function () {
	        this.current_rule_result += "Subject." + this.selected_subject_field + " ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_subject_field_to_target = function () {
	        this.target_result += "Subject." + this.selected_subject_field + " ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_constant_value_to_rule = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.current_rule_result += "'" + this.constant_value + "' ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_constant_value_to_target = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.target_result += "'" + this.constant_value + "' ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_environment_value_to_rule = function () {
	        this.current_rule_result += "Environment." + this.environment_value + " ";
	    };
	    PrivacyPolicyDetailComponent.prototype.add_environment_value_to_target = function () {
	        this.target_result += "Environment." + this.environment_value + " ";
	    };
	    //#endregion
	    //#region logic form
	    PrivacyPolicyDetailComponent.prototype.and_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "AND ";
	        }
	        else {
	            this.current_rule_result += "AND ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.or_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "OR ";
	        }
	        else {
	            this.current_rule_result += "OR ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.not_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "NOT ( ";
	        }
	        else {
	            this.current_rule_result += "NOT ( ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.open_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "( ";
	        }
	        else {
	            this.current_rule_result += "( ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.close_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ") ";
	        }
	        else {
	            this.current_rule_result += ") ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.comma_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ", ";
	        }
	        else {
	            this.current_rule_result += ", ";
	        }
	    };
	    PrivacyPolicyDetailComponent.prototype.clear_rule = function (isTarget) {
	        if (isTarget) {
	            this.target_result = "";
	        }
	        else {
	            this.current_rule_result = "";
	        }
	    };
	    //#endregion
	    PrivacyPolicyDetailComponent.prototype.reset = function () {
	        this.rule_ids = [];
	        this.target_result = '';
	        this.current_rule_result = '';
	        this.privacy_rules = [];
	    };
	    PrivacyPolicyDetailComponent.prototype.add_current_rule = function () {
	        if (this.rule_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule Id can not be null' });
	            return;
	        }
	        if (this.current_rule_result == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        for (var _i = 0, _a = this.rule_ids; _i < _a.length; _i++) {
	            var r = _a[_i];
	            if (r == this.rule_id) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID must be unique' });
	                return;
	            }
	        }
	        this.final_rule_result.push(this.current_rule_result);
	        this.rule_ids.push(this.rule_id);
	        var cloned = [];
	        for (var _b = 0, _c = this.field_effects; _b < _c.length; _b++) {
	            var item = _c[_b];
	            cloned.push(new privacy_rule_model_1.FieldEffect(item.Name, item.FunctionApply));
	        }
	        this.final_field_effects.push(cloned);
	        this.privacy_rules.push(new privacy_rule_model_1.PrivacyRule(this.rule_id, this.current_rule_result, cloned));
	        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'One Rule added' });
	    };
	    PrivacyPolicyDetailComponent.prototype.getPrivacyFunctions = function (fieldName) {
	        var result;
	        if (this.field_effect_options.length == 0)
	            return this.privacy_functions;
	        else
	            result = this.field_effect_options.find(function (x) { return x.Name == fieldName; });
	        if (result != undefined)
	            return result.Functions;
	        return this.privacy_functions;
	    };
	    PrivacyPolicyDetailComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    PrivacyPolicyDetailComponent.prototype.submit = function () {
	        var _this = this;
	        console.log(this.final_field_effects);
	        if (this.policy_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Policy Id can not be null' });
	            return;
	        }
	        if (this.privacy_rules.length == 0) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rules can not be null' });
	            return;
	        }
	        var command = {
	            "PolicyID": this.policy_id,
	            "CollectionName": this.collection_selected_name,
	            "Description": this.description,
	            "Target": this.target_result,
	            "Rules": this.privacy_rules
	        };
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyPolicy', JSON.stringify(command), this.options).subscribe(function (data) {
	            that.reset();
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: "Privacy Policy added successfully" });
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return PrivacyPolicyDetailComponent;
	}());
	PrivacyPolicyDetailComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_policy_detail',
	        template: __webpack_require__(35)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PrivacyPolicyDetailComponent);
	exports.PrivacyPolicyDetailComponent = PrivacyPolicyDetailComponent;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Privacy Policy Detail</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Policy Identifier :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"policy_id\" />\r\n            </div>\r\n            <div class=\"col-xs-8 form-group\">\r\n                <label style=\"padding-right:5px\">Description :</label>\r\n                <input type=\"text\" size=\"70\" pInputText [(ngModel)]=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Collection Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'150px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <!-- Target -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Target :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\",\" (click)=\"comma_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule(true)\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"target_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <!-- Rule -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Current Rule :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\",\" (click)=\"comma_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"current_rule_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <p-dataTable [value]=\"field_effects\" [editable]=\"true\">\r\n                <p-column field=\"Name\" header=\"Property Name\" [editable]=\"false\"></p-column>\r\n                <p-column field=\"FunctionApply\" header=\"Privacy Function\"\r\n                          [editable]=\"true\" [style]=\"{'overflow':'visible'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"editor\">\r\n                        <p-dropdown [(ngModel)]=\"car[col.field]\" [options]=\"getPrivacyFunctions(car.Name)\"\r\n                                    [autoWidth]=\"false\" [style]=\"{'width':'100%'}\" required=\"true\"></p-dropdown>\r\n                    </template>\r\n                </p-column>\r\n            </p-dataTable>\r\n        </div>\r\n        <div class=\"col-xs-12\" style=\"padding-top: 5px\">\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label style=\"padding-right:5px\">Rule Id :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"rule_id\" />\r\n            </div>\r\n            <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add Current Rule\" (click)=\"add_current_rule()\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\" *ngIf=\"privacy_rules.length > 0\">\r\n            <p-dataTable [value]=\"privacy_rules\" [editable]=\"true\">\r\n                <p-column field=\"RuleID\" header=\"Rule ID\" [editable]=\"true\"></p-column>\r\n                <p-column field=\"Condition\" header=\"Condition\" [editable]=\"true\" [style]=\"{'width':'400px'}\"></p-column>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <p-fieldset legend=\"Utility\" [toggleable]=\"true\">\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Function Name: </label>\r\n                    <p-dropdown [options]=\"function_names\" [(ngModel)]=\"selected_function_name\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_function_name_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_function_name_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Resource Field: </label>\r\n                    <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_resource_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_resource_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:28px\">Subject Field: </label>\r\n                    <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_subject_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_subject_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Constant Value: </label>\r\n                    <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"constant_value\" />\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_constant_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_constant_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"\">Environment Field: </label>\r\n                    <p-autoComplete [(ngModel)]=\"environment_value\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                                    [minLength]=\"1\" [size]=\"17\">\r\n                    </p-autoComplete>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_environment_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_environment_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n\r\n        </p-fieldset>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Update</button>\r\n    </div>\r\n</div>"

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var primeng_1 = __webpack_require__(21);
	var app_setting_1 = __webpack_require__(22);
	var privacy_domain_model_1 = __webpack_require__(37);
	var PrivacyDomainComponent = (function () {
	    function PrivacyDomainComponent(http) {
	        this.http = http;
	        this.configured_domain_names = [];
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.configured_privacy_domain_functions = [];
	        this.configured_privacy_domain_functions_view = [];
	        this.configured_privacy_domain_fields = [];
	        this.configured_privacy_domain_fields_view = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    PrivacyDomainComponent.prototype.ngOnInit = function () {
	        var that = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyDomainField/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_2 = collections; _i < collections_2.length; _i++) {
	                var domain = collections_2[_i];
	                that.configured_domain_names.push({ label: domain.domainName, value: domain.domainName });
	                for (var _a = 0, _b = domain.functions; _a < _b.length; _a++) {
	                    var func = _b[_a];
	                    that.configured_privacy_domain_functions.push(new privacy_domain_model_1.PrivacyDomainFunction(func.name, func.priority, domain.domainName));
	                }
	                for (var _c = 0, _d = domain.fields; _c < _d.length; _c++) {
	                    var field = _d[_c];
	                    that.configured_privacy_domain_fields.push(new privacy_domain_model_1.PrivacyDomainField(field, domain.domainName));
	                }
	            }
	            that.configured_domain_selected_name = that.configured_domain_names[0].label;
	            that.onSelectDomainName(that.configured_domain_selected_name);
	        });
	    };
	    PrivacyDomainComponent.prototype.onSelectDomainName = function (domain_selected) {
	        this.configured_privacy_domain_functions_view = this.configured_privacy_domain_functions.filter(function (x) { return x.DomainName == domain_selected; });
	        this.configured_privacy_domain_fields_view = this.configured_privacy_domain_fields.filter(function (x) { return x.DomainName == domain_selected; });
	    };
	    PrivacyDomainComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_field_effects(property, jsonObject, "", that.resource_fields);
	            }
	        });
	    };
	    PrivacyDomainComponent.prototype.initialize_field_effects = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var that = this;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_field_effects(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_field_effects(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '') {
	                container.push({ label: property, value: property });
	            }
	            else {
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	            }
	        }
	    };
	    PrivacyDomainComponent.prototype.updatePriorityFunctions = function () {
	        var _this = this;
	        var priority_functions = [];
	        for (var _i = 0, _a = this.configured_privacy_domain_functions_view; _i < _a.length; _i++) {
	            var func = _a[_i];
	            priority_functions.push({ "Name": func.FunctionName, "Priority": func.Priority });
	        }
	        var command = {
	            "DomainName": this.configured_domain_selected_name,
	            "PriorityFunctions": priority_functions
	        };
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'PriorityFunctions', JSON.stringify(command), this.options).subscribe(function (data) {
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'Update Priority Successfully' });
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error });
	        });
	    };
	    PrivacyDomainComponent.prototype.addField = function () {
	        var _this = this;
	        var fieldName = this.collection_selected_name + "." + this.resource_selected_field;
	        for (var _i = 0, _a = this.configured_privacy_domain_fields_view; _i < _a.length; _i++) {
	            var field = _a[_i];
	            if (field.FieldName == fieldName) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Field already existed' });
	                return;
	            }
	        }
	        var command = {
	            "DomainName": this.configured_domain_selected_name,
	            "FieldName": fieldName
	        };
	        console.log(command);
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'DomainField', JSON.stringify(command), this.options).subscribe(function (data) {
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'Field Added Successfully' });
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error });
	        });
	    };
	    PrivacyDomainComponent.prototype.addDomain = function () {
	        var _this = this;
	        var name = this.domain_name;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyDomain', JSON.stringify(name), this.options).subscribe(function (data) {
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'Insert Domain Successfully' });
	        });
	    };
	    return PrivacyDomainComponent;
	}());
	PrivacyDomainComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_domain',
	        template: __webpack_require__(38),
	        providers: [primeng_1.ConfirmationService]
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PrivacyDomainComponent);
	exports.PrivacyDomainComponent = PrivacyDomainComponent;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var PrivacyDomain = (function () {
	    function PrivacyDomain(name, fieldsApply) {
	        this.Name = name;
	        this.FieldsApply = fieldsApply;
	    }
	    return PrivacyDomain;
	}());
	exports.PrivacyDomain = PrivacyDomain;
	var PrivacyDomainFunction = (function () {
	    function PrivacyDomainFunction(funcName, priority, domainName) {
	        this.FunctionName = funcName;
	        this.Priority = priority;
	        this.DomainName = domainName;
	    }
	    return PrivacyDomainFunction;
	}());
	exports.PrivacyDomainFunction = PrivacyDomainFunction;
	var PrivacyDomainField = (function () {
	    function PrivacyDomainField(fieldName, domainName) {
	        this.FieldName = fieldName;
	        this.DomainName = domainName;
	    }
	    return PrivacyDomainField;
	}());
	exports.PrivacyDomainField = PrivacyDomainField;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	module.exports = "<p-growl [value]=\"msgs\"></p-growl>\r\n<h1 style=\"text-align:center\">Privacy Domain</h1>\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12\">\r\n        <h3>New Domain</h3>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label style=\"padding-right:25px\">Name :</label>\r\n            <input type=\"text\" size=\"25\" pInputText [(ngModel)]=\"domain_name\" />\r\n        </div>\r\n        <div class=\"col-lg-4 form-group\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" (click)=\"addDomain()\" label=\"Add Domain\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <h3>Registered Domain</h3>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label style=\"padding-right:7px\">Domains :</label>\r\n            <p-dropdown [options]=\"configured_domain_names\" [(ngModel)]=\"configured_domain_selected_name\"\r\n                        [style]=\"{'width':'200px'}\" (onChange)=\"onSelectDomainName($event.value)\"></p-dropdown>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label>Functions :</label>\r\n            <p-dropdown [options]=\"configured_domain_names\" [(ngModel)]=\"configured_domain_selected_name\"\r\n                        [style]=\"{'width':'200px'}\" (onChange)=\"onSelectDomainName($event.value)\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label style=\"padding-right:5px\">Priority :</label>\r\n            <input type=\"number\" size=\"20\" pInputText />\r\n        </div>\r\n        <div class=\"col-lg-4 form-group\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" (click)=\"addField()\" label=\"Add Function\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\" style=\"margin-bottom:10px;\">\r\n        <label>Functions</label>\r\n        <p-dataTable [value]=\"configured_privacy_domain_functions_view\" [editable]=\"true\">\r\n            <p-column field=\"DomainName\" header=\"Domain Name\"></p-column>\r\n            <p-column field=\"FunctionName\" header=\"Function Name\" [style]=\"{'width':'320px'}\"></p-column>\r\n            <p-column field=\"Priority\" header=\"Priority\" [editable]=\"true\"></p-column>\r\n        </p-dataTable>\r\n    </div>\r\n    <div class=\"col-lg-12\" style=\"margin-bottom:10px;\">\r\n        <div class=\"col-lg-4 \">\r\n            <button type=\"button\" pButton icon=\"fa-save\" (click)=\"updatePriorityFunctions()\" label=\"Update Priority\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-lg-12\" style=\"margin-bottom:20px;\">\r\n        <label>Fields</label>\r\n        <p-dataTable [value]=\"configured_privacy_domain_fields_view\" [editable]=\"true\">\r\n            <p-column field=\"DomainName\" header=\"Domain Name\"></p-column>\r\n            <p-column field=\"FieldName\" header=\"Field Name\"></p-column>\r\n        </p-dataTable>\r\n    </div>\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label>Collection :</label>\r\n            <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                        [style]=\"{'width':'200px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-lg-4 form-group\">\r\n            <label>Fields :</label>\r\n            <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\"\r\n                        [style]=\"{'width':'200px'}\"></p-dropdown>\r\n        </div>\r\n        <div class=\"col-lg-4\">\r\n            <button type=\"button\" pButton icon=\"fa-plus\" (click)=\"addField()\" label=\"Add Field\"></button>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var primeng_1 = __webpack_require__(21);
	var app_setting_1 = __webpack_require__(22);
	var access_control_rule_model_1 = __webpack_require__(25);
	var privacy_rule_model_1 = __webpack_require__(26);
	var PolicyManagementComponent = (function () {
	    function PolicyManagementComponent(http) {
	        this.http = http;
	        this.access_controls = [];
	        this.privacy_policy = [];
	    }
	    PolicyManagementComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'AccessControlPolicy/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var _i = 0, jsonObject_1 = jsonObject; _i < jsonObject_1.length; _i++) {
	                var data_1 = jsonObject_1[_i];
	                _this.access_controls.push(new access_control_rule_model_1.AccessControl(data_1.policyId, data_1.description, data_1.collectionName, data_1.ruleCombining));
	            }
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyPolicy/').subscribe(function (data) {
	            var jsonObject = data.json();
	            console.log(jsonObject);
	            for (var _i = 0, jsonObject_2 = jsonObject; _i < jsonObject_2.length; _i++) {
	                var data_2 = jsonObject_2[_i];
	                _this.privacy_policy.push(new privacy_rule_model_1.PrivacyPolicy(data_2.policyId, data_2.description, data_2.collectionName));
	            }
	        });
	    };
	    return PolicyManagementComponent;
	}());
	PolicyManagementComponent = __decorate([
	    core_1.Component({
	        selector: 'access_control_management',
	        template: __webpack_require__(40),
	        providers: [primeng_1.ConfirmationService]
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], PolicyManagementComponent);
	exports.PolicyManagementComponent = PolicyManagementComponent;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-12\"><h3 style=\"color: blue\">Access Control Management</h3></div>\r\n    <div class=\"col-lg-12\">\r\n        <p-dataTable [value]=\"access_controls\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,20,50]\" [rows]=\"10\">\r\n            <p-column field=\"PolicyID\" header=\"Policy ID\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Description\" header=\"Description\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"CollectionName\" header=\"Collection Name\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"RuleCombining\" header=\"Rule Combining\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Action\" header=\"Action\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" pButton (click)=\"select_access_control(car)\" icon=\"fa-share\"></button>\r\n                </template>\r\n            </p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" class=\"ui-button-danger\" pButton (click)=\"delete_privacy_policy(car)\" icon=\"fa-trash\"></button>\r\n                </template>\r\n            </p-column>\r\n        </p-dataTable>\r\n    </div>\r\n    <div class=\"col-lg-12\"><h3 style=\"color: blue\">Privacy Management</h3></div>\r\n    <div class=\"col-lg-12\">\r\n        <p-dataTable [value]=\"privacy_policy\" [paginator]=\"true\" [pageLinks]=\"3\" [rowsPerPageOptions]=\"[10,20,50]\" [rows]=\"10\">\r\n            <p-column field=\"PolicyID\" header=\"Policy ID\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"Description\" header=\"Description\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column field=\"CollectionName\" header=\"Collection Name\" [sortable]=\"true\" [filter]=\"true\" filterMatchMode=\"contains\"></p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" pButton (click)=\"select_privacy_policy(car)\" icon=\"fa-share\"></button>\r\n                </template>\r\n            </p-column>\r\n            <p-column styleClass=\"col-button\">\r\n                <template let-car=\"rowData\" pTemplate=\"body\">\r\n                    <button type=\"button\" class=\"ui-button-danger\" pButton (click)=\"delete_privacy_policy(car)\" icon=\"fa-trash\"></button>\r\n                </template>\r\n            </p-column>\r\n        </p-dataTable>\r\n    </div>\r\n</div>"

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var core_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(20);
	var app_setting_1 = __webpack_require__(22);
	var privacy_rule_model_1 = __webpack_require__(26);
	var SubPrivacyPolicyFormCreateComponent = (function () {
	    function SubPrivacyPolicyFormCreateComponent(http) {
	        this.http = http;
	        //#region Resource
	        this.collection_names = [];
	        this.resource_fields = [];
	        this.resource_operators = [];
	        this.condition_result = "";
	        //#endregion
	        this.policy_id = '';
	        this.description = '';
	        this.actions = [];
	        this.function_names = [];
	        this.subject_fields = [];
	        this.current_rule_result = "";
	        this.final_rule_result = [];
	        this.target_result = "";
	        this.constant_value = '';
	        this.environment_field_options = ['purpose', 'start_time', 'end_time'];
	        //#endregion environment
	        this.rule_id = '';
	        this.rule_ids = [];
	        this.privacy_functions = [];
	        this.field_effects = [];
	        this.final_field_effects = [];
	        this.field_effect_options = [];
	        this.privacy_rules = [];
	        this.msgs = [];
	        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
	        this.options = new http_1.RequestOptions({ headers: this.headers });
	        this.json_helper = JSON;
	    }
	    SubPrivacyPolicyFormCreateComponent.prototype.ngOnInit = function () {
	        var that = this;
	        //#region call web api for option data
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'collections/').subscribe(function (data) {
	            var collections = data.json();
	            for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {
	                var name = collections_1[_i];
	                that.collection_names.push({ label: name, value: name });
	            }
	            that.collection_names.push({ label: 'Department.projects', value: 'Department.projects' });
	            that.collection_selected_name = collections[0];
	            that.onSelectCollectionName(collections[0]);
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'function/').subscribe(function (data) {
	            var names = data.json();
	            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
	                var name = names_1[_i];
	                that.function_names.push({ label: name, value: name });
	            }
	            that.selected_function_name = names[0];
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'subject/fields/').subscribe(function (data) {
	            var jsonObject = data.json();
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (that.selected_subject_field === undefined)
	                    that.selected_subject_field = property;
	                that.initialize_fields(property, jsonObject, "", that.subject_fields);
	            }
	        });
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunctions/').subscribe(function (data) {
	            var methods = data.json();
	            for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	                var method = methods_1[_i];
	                that.privacy_functions.push({ label: method, value: method });
	            }
	            that.privacy_functions.push({ label: 'Optional', value: 'Optional' });
	        });
	        //#endregion
	        //#region hard code for options
	        this.actions.push({ label: 'read', value: 'read' });
	        this.actions.push({ label: 'create', value: 'create' });
	        this.actions.push({ label: 'update', value: 'update' });
	        this.actions.push({ label: 'delete', value: 'delete' });
	        this.selected_action = this.actions[0].value;
	        //#endregion
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.onSelectCollectionName = function (collectionSelected) {
	        var that = this;
	        this.resource_fields = [];
	        this.field_effect_options = [];
	        this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'structure/?collectionName=' + collectionSelected).subscribe(function (data) {
	            var jsonObject = data.json();
	            var initialize_resource_selected = false;
	            for (var property in jsonObject) {
	                if (property == '_id')
	                    continue;
	                if (!initialize_resource_selected) {
	                    initialize_resource_selected = true;
	                    that.resource_selected_field = property;
	                }
	                that.initialize_field_effects(property, jsonObject, "", that.resource_fields);
	                that.field_effects = [];
	                for (var _i = 0, _a = that.resource_fields; _i < _a.length; _i++) {
	                    var item = _a[_i];
	                    that.field_effects.push(new privacy_rule_model_1.FieldEffect(item.label, "Optional"));
	                }
	            }
	        });
	        this.reset();
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.initialize_field_effects = function (property, jsonObject, prefix, container) {
	        var _this = this;
	        if (property == "_id")
	            return;
	        var that = this;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_field_effects(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_field_effects(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            var name_1 = "";
	            if (prefix == '') {
	                container.push({ label: property, value: property });
	                name_1 = property;
	            }
	            else {
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	                name_1 = prefix + '.' + property;
	            }
	            var parameter = this.collection_selected_name + '.' + name_1;
	            this.http.get(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyFunction?name=' + parameter, this.options).subscribe(function (data) {
	                var effects = data.json();
	                var select_items = [];
	                for (var _i = 0, effects_1 = effects; _i < effects_1.length; _i++) {
	                    var effect = effects_1[_i];
	                    select_items.push({ label: effect, value: effect });
	                }
	                that.field_effect_options.push(new privacy_rule_model_1.FieldEffectOption(name_1, select_items));
	            }, function (error) {
	                _this.msgs = [];
	                _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	            });
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.initialize_fields = function (property, jsonObject, prefix, container) {
	        if (property == "_id")
	            return;
	        var object = jsonObject[property];
	        if (typeof object === 'object' && !Array.isArray(object)) {
	            for (var sub_property in object) {
	                if (prefix == '')
	                    this.initialize_fields(sub_property, object, prefix + property, container);
	                else
	                    this.initialize_fields(sub_property, object, prefix + '.' + property, container);
	            }
	        }
	        else {
	            if (prefix == '')
	                container.push({ label: property, value: property });
	            else
	                container.push({ label: prefix + '.' + property, value: prefix + '.' + property });
	        }
	    };
	    //#region data form.
	    SubPrivacyPolicyFormCreateComponent.prototype.add_function_name_to_rule = function () {
	        this.current_rule_result += this.selected_function_name + " ( ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_function_name_to_target = function () {
	        this.target_result += this.selected_function_name + " ( ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_resource_field_to_rule = function () {
	        this.current_rule_result += "Resource." + this.resource_selected_field + " ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_resource_field_to_target = function () {
	        this.target_result += "Resource." + this.resource_selected_field + " ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_subject_field_to_rule = function () {
	        this.current_rule_result += "Subject." + this.selected_subject_field + " ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_subject_field_to_target = function () {
	        this.target_result += "Subject." + this.selected_subject_field + " ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_constant_value_to_rule = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.current_rule_result += "'" + this.constant_value + "' ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_constant_value_to_target = function () {
	        if (this.constant_value == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not be null' });
	            return;
	        }
	        if (this.constant_value.indexOf('\'') != -1) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Constant value can not contain \' character' });
	            return;
	        }
	        this.target_result += "'" + this.constant_value + "' ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_environment_value_to_rule = function () {
	        this.current_rule_result += "Environment." + this.environment_value + " ";
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_environment_value_to_target = function () {
	        this.target_result += "Environment." + this.environment_value + " ";
	    };
	    //#endregion
	    //#region logic form
	    SubPrivacyPolicyFormCreateComponent.prototype.and_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "AND ";
	        }
	        else {
	            this.current_rule_result += "AND ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.or_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "OR ";
	        }
	        else {
	            this.current_rule_result += "OR ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.not_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "NOT ( ";
	        }
	        else {
	            this.current_rule_result += "NOT ( ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.open_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += "( ";
	        }
	        else {
	            this.current_rule_result += "( ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.close_bracket_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ") ";
	        }
	        else {
	            this.current_rule_result += ") ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.comma_click = function (isTarget) {
	        if (isTarget) {
	            this.target_result += ", ";
	        }
	        else {
	            this.current_rule_result += ", ";
	        }
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.clear_rule = function (isTarget) {
	        if (isTarget) {
	            this.target_result = "";
	        }
	        else {
	            this.current_rule_result = "";
	        }
	    };
	    //#endregion
	    SubPrivacyPolicyFormCreateComponent.prototype.reset = function () {
	        this.rule_ids = [];
	        this.target_result = '';
	        this.current_rule_result = '';
	        this.privacy_rules = [];
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.add_current_rule = function () {
	        if (this.rule_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule Id can not be null' });
	            return;
	        }
	        if (this.current_rule_result == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule can not be null' });
	            return;
	        }
	        for (var _i = 0, _a = this.rule_ids; _i < _a.length; _i++) {
	            var r = _a[_i];
	            if (r == this.rule_id) {
	                this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rule ID must be unique' });
	                return;
	            }
	        }
	        this.final_rule_result.push(this.current_rule_result);
	        this.rule_ids.push(this.rule_id);
	        var cloned = [];
	        for (var _b = 0, _c = this.field_effects; _b < _c.length; _b++) {
	            var item = _c[_b];
	            cloned.push(new privacy_rule_model_1.FieldEffect(item.Name, item.FunctionApply));
	        }
	        this.final_field_effects.push(cloned);
	        this.privacy_rules.push(new privacy_rule_model_1.PrivacyRule(this.rule_id, this.current_rule_result, cloned));
	        this.msgs.push({ severity: 'info', summary: 'Info Message', detail: 'One Rule added' });
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.getPrivacyFunctions = function (fieldName) {
	        var result;
	        if (this.field_effect_options.length == 0)
	            return this.privacy_functions;
	        else
	            result = this.field_effect_options.find(function (x) { return x.Name == fieldName; });
	        if (result != undefined)
	            return result.Functions;
	        return this.privacy_functions;
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.filter_environment_field = function (event) {
	        var query = event.query;
	        var filtered = [];
	        for (var i = 0; i < this.environment_field_options.length; i++) {
	            var field = this.environment_field_options[i];
	            if (field.toLowerCase().indexOf(query.toLowerCase()) == 0) {
	                filtered.push(field);
	            }
	        }
	        this.environment_filtered_field = filtered;
	    };
	    SubPrivacyPolicyFormCreateComponent.prototype.submit = function () {
	        var _this = this;
	        console.log(this.final_field_effects);
	        if (this.policy_id == '') {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Policy Id can not be null' });
	            return;
	        }
	        if (this.privacy_rules.length == 0) {
	            this.msgs.push({ severity: 'error', summary: 'Error Message', detail: 'Rules can not be null' });
	            return;
	        }
	        var command = {
	            "PolicyID": this.policy_id,
	            "CollectionName": this.collection_selected_name,
	            "Description": this.description,
	            "Target": this.target_result,
	            "Rules": this.privacy_rules
	        };
	        var that = this;
	        this.http.post(app_setting_1.AppSetting.API_ENDPOINT + 'PrivacyPolicy', JSON.stringify(command), this.options).subscribe(function (data) {
	            that.reset();
	            _this.msgs.push({ severity: 'info', summary: 'Info Message', detail: "Privacy Policy added successfully" });
	        }, function (error) {
	            _this.msgs = [];
	            _this.msgs.push({ severity: 'error', summary: 'Error Message', detail: error.text() });
	        });
	    };
	    return SubPrivacyPolicyFormCreateComponent;
	}());
	SubPrivacyPolicyFormCreateComponent = __decorate([
	    core_1.Component({
	        selector: 'privacy_policy',
	        template: __webpack_require__(42)
	    }),
	    __metadata("design:paramtypes", [http_1.Http])
	], SubPrivacyPolicyFormCreateComponent);
	exports.SubPrivacyPolicyFormCreateComponent = SubPrivacyPolicyFormCreateComponent;


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	module.exports = "<h3 style=\"text-align:center\">Sub Privacy Policy Form</h3>\r\n<p-growl [value]=\"msgs\"></p-growl>\r\n<div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Policy Identifier :</label>\r\n                <input type=\"text\" size=\"21\" pInputText [(ngModel)]=\"policy_id\" />\r\n            </div>\r\n            <div class=\"col-xs-8 form-group\">\r\n                <label style=\"padding-right:5px\">Description :</label>\r\n                <input type=\"text\" size=\"70\" pInputText [(ngModel)]=\"description\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:35px\">Field Name :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'180px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:35px\">Domain :</label>\r\n                <p-dropdown [options]=\"collection_names\" [(ngModel)]=\"collection_selected_name\"\r\n                            [style]=\"{'width':'180px'}\" (onChange)=\"onSelectCollectionName($event.value)\"></p-dropdown>\r\n            </div>\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label style=\"padding-right:5px\">Priority :</label>\r\n                <input type=\"number\" size=\"20\" pInputText />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <!-- Target -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Target :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"AND\" (click)=\"and_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"OR\" (click)=\"or_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\",\" (click)=\"comma_click(true)\"></button>\r\n                <button class=\"ui-button-warning\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule(true)\"></button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"target_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <!-- Rule -->\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-4 form-group\">\r\n                <label>Current Rule :</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <div class=\"col-xs-12 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"AND\" (click)=\"and_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"OR\" (click)=\"or_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"NOT\" (click)=\"not_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"(\" (click)=\"open_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\")\" (click)=\"close_bracket_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\",\" (click)=\"comma_click()\"></button>\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"CLEAR\" (click)=\"clear_rule()\"></button>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <textarea style=\"border-color: black\" rows=\"2\" cols=\"70\" pInputTextarea\r\n                      [(ngModel)]=\"current_rule_result\" [disabled]=\"true\"></textarea>\r\n        </div>\r\n        <div class=\"col-xs-12\">\r\n            <p-dataTable [value]=\"field_effects\" [editable]=\"true\">\r\n                <p-column field=\"Name\" header=\"Property Name\" [editable]=\"false\"></p-column>\r\n                <p-column field=\"FunctionApply\" header=\"Privacy Function\"\r\n                          [editable]=\"true\" [style]=\"{'overflow':'visible'}\">\r\n                    <template let-col let-car=\"rowData\" pTemplate=\"editor\">\r\n                        <p-dropdown [(ngModel)]=\"car[col.field]\" [options]=\"getPrivacyFunctions(car.Name)\"\r\n                                    [autoWidth]=\"false\" [style]=\"{'width':'100%'}\" required=\"true\"></p-dropdown>\r\n                    </template>\r\n                </p-column>\r\n            </p-dataTable>\r\n        </div>\r\n        <div class=\"col-xs-12\" style=\"padding-top: 5px\">\r\n            <div class=\"col-xs-6 form-group\">\r\n                <label style=\"padding-right:5px\">Rule Id :</label>\r\n                <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"rule_id\" />\r\n            </div>\r\n            <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add Current Rule\" (click)=\"add_current_rule()\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12\" *ngIf=\"privacy_rules.length > 0\">\r\n            <p-dataTable [value]=\"privacy_rules\" [editable]=\"true\">\r\n                <p-column field=\"RuleID\" header=\"Rule ID\" [editable]=\"true\"></p-column>\r\n                <p-column field=\"Condition\" header=\"Condition\" [editable]=\"true\" [style]=\"{'width':'400px'}\"></p-column>\r\n            </p-dataTable>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n        <p-fieldset legend=\"Utility\" [toggleable]=\"true\">\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Function Name: </label>\r\n                    <p-dropdown [options]=\"function_names\" [(ngModel)]=\"selected_function_name\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_function_name_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_function_name_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Resource Field: </label>\r\n                    <p-dropdown [options]=\"resource_fields\" [(ngModel)]=\"resource_selected_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_resource_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_resource_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-4 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:28px\">Subject Field: </label>\r\n                    <p-dropdown [options]=\"subject_fields\" [(ngModel)]=\"selected_subject_field\" [style]=\"{'width':'150px'}\"></p-dropdown>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_subject_field_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-4 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_subject_field_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"padding-right:13px\">Constant Value: </label>\r\n                    <input type=\"text\" size=\"17\" pInputText [(ngModel)]=\"constant_value\" />\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_constant_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_constant_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-xs-12\">\r\n                <div class=\"col-xs-6 col-lg-4 form-group\">\r\n                    <label style=\"\">Environment Field: </label>\r\n                    <p-autoComplete [(ngModel)]=\"environment_value\" [suggestions]=\"environment_filtered_field\" (completeMethod)=\"filter_environment_field($event)\"\r\n                                    [minLength]=\"1\" [size]=\"17\">\r\n                    </p-autoComplete>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-warning\" pButton type=\"button\" label=\"Add To Target\" (click)=\"add_environment_value_to_target()\"></button>\r\n                </div>\r\n                <div class=\"col-xs-6 col-lg-4 form-group\" style=\"padding-top:25px\">\r\n                    <button class=\"ui-button-info\" pButton type=\"button\" label=\"Add To Rule\" (click)=\"add_environment_value_to_rule()\"></button>\r\n                </div>\r\n            </div>\r\n\r\n        </p-fieldset>\r\n\r\n    </div>\r\n    <div class=\"col-lg-12 text-center\">\r\n        <button class=\"btn btn-success btn-lg\" type=\"button\" style=\"height:90%\" (click)=\"submit()\">Create</button>\r\n    </div>\r\n</div>"

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,